import os
import requests
import traceback
from flask import Flask, request, jsonify
from youtube_transcript_api import YouTubeTranscriptApi
from urllib.parse import urlparse, parse_qs
from concurrent.futures import ThreadPoolExecutor, as_completed

app = Flask(__name__)


PROXY_LIST = [
  "47.236.163.74:8080",
  "18.170.63.85:999",
  "47.239.48.114:59394",
  "85.215.64.49:80",
  "219.65.73.81:80",
  "57.129.81.201:8080",
  "51.81.245.31:7981",
  "32.223.6.94:80",
  "133.18.234.13:80",
  "105.225.53.124:3128",
  "190.58.248.86:80",
  "4.156.78.45:80",
  "205.198.65.77:80",
  "130.185.74.84:2052",
  "4.245.123.244:80",
  "92.67.186.210:80",
  "4.195.16.140:80",
  "41.191.203.161:80",
  "45.146.163.31:80",
  "108.141.130.146:80",
  "91.243.226.210:8080",
  "213.143.113.82:80",
  "149.200.200.44:80",
  "84.39.112.144:3128",
  "156.224.77.255:80",
  "143.42.66.91:80",
  "103.79.131.70:13001",
  "139.99.237.62:80",
  "219.93.101.60:80",
  "219.93.101.63:80",
  "213.189.137.134:80",
  "138.199.233.152:80",
  "0.0.0.0:80",
  "97.74.87.226:80",
  "68.185.57.66:80",
  "3.101.76.84:18242",
  "123.141.181.85:5031",
  "5.75.142.180:28080",
  "13.38.66.165:3128",
  "3.10.207.94:8000",
  "67.43.228.250:7015",
  "50.122.86.118:80",
  "50.172.150.134:80",
  "144.22.175.58:1080",
  "43.199.163.10:3128",
  "54.219.186.252:9909",
  "123.140.146.205:5031",
  "78.46.84.169:8080",
  "195.158.8.123:3128",
  "200.174.198.86:8888",
  "198.23.143.74:80",
  "38.147.98.190:8080",
  "8.222.17.214:1080",
  "5.78.129.53:80",
  "37.187.74.125:80",
  "123.140.146.215:5031",
  "23.247.136.254:80",
  "43.216.214.221:4289",
  "78.47.127.91:80",
  "124.108.6.20:8085",
  "59.7.246.4:80",
  "123.141.181.84:5031",
  "40.76.69.94:8080",
  "123.141.181.49:5031",
  "35.152.137.65:26038",
  "159.69.57.208:880",
  "103.75.119.185:80",
  "213.189.137.132:80",
  "123.141.181.15:5031",
  "44.226.40.47:90",
  "198.49.68.80:80",
  "16.26.88.42:8095",
  "54.168.197.42:18411",
  "211.128.96.206:80",
  "127.0.0.7:80",
  "159.203.61.169:3128",
  "158.255.77.168:80",
  "152.230.215.123:80",
  "78.38.53.36:80",
  "149.129.255.179:8080",
  "89.19.175.122:8010",
  "34.124.190.108:8090",
  "103.65.237.92:5678",
  "41.59.90.175:80",
  "81.169.213.169:8888",
  "146.59.202.70:80",
  "155.94.241.131:3128",
  "154.118.231.30:80",
  "82.102.10.253:80",
  "41.59.90.171:80",
  "198.74.51.79:8888",
  "41.59.90.168:80",
  "154.65.39.8:80",
  "192.73.244.36:80",
  "155.94.241.133:3128",
  "46.47.197.210:3128",
  "147.75.34.74:10019",
  "103.167.31.157:8080",
  "171.228.160.175:5109",
  "209.97.150.167:8080",
  "188.132.222.41:8080",
  "138.68.60.8:80",
  "23.247.136.248:80",
  "186.179.169.22:3128",
  "43.216.143.123:9008",
  "195.114.209.50:80",
  "13.80.134.180:80",
  "108.136.149.202:5505",
  "117.54.114.96:80",
  "13.245.30.86:3128",
  "5.45.126.128:8080",
  "176.126.103.194:44214",
  "23.157.88.25:1080",
  "14.241.80.37:8080",
  "38.180.82.21:8080",
  "89.117.145.245:3128",
  "176.65.149.147:8081",
  "143.110.232.177:80",
  "154.90.48.76:80",
  "47.251.43.115:33333",
  "158.255.77.169:80",
  "135.148.120.6:80",
  "87.255.196.143:80",
  "134.209.137.213:3128",
  "106.0.158.114:8080",
  "188.166.230.109:31028",
  "162.214.165.203:80",
  "147.75.34.105:443",
  "147.45.178.211:14658",
  "103.211.107.230:1111",
  "185.41.152.110:3128",
  "18.203.249.67:10010",
  "47.236.37.129:18081",
  "139.59.1.14:80",
  "103.247.23.28:9223",
  "42.113.20.216:16000",
  "103.123.168.20:23932",
  "161.34.66.94:4649",
  "185.5.251.0:2080",
  "8.213.128.6:8019",
  "103.187.86.54:8182",
  "65.108.203.36:18080",
  "186.124.164.213:80",
  "84.103.174.6:80",
  "209.121.164.5:31147",
  "13.212.216.155:2638",
  "47.56.110.204:8989",
  "193.151.141.17:8080",
  "198.199.86.1:8080",
  "116.103.26.249:16000",
  "35.179.146.18:3128",
  "157.20.82.40:6666",
  "43.217.116.234:16170",
  "96.70.186.221:80",
  "27.79.130.5:16000",
  "43.216.75.140:42761",
  "13.126.217.46:3128",
  "3.109.62.30:717",
  "138.117.231.13:3999",
  "204.157.251.210:999"
]

def check_proxy(proxy):
    test_url = "https://www.google.com"
    headers = {"User-Agent": "Mozilla/5.0"}
    proxy_url = f"http://{proxy}"
    try:
        response = requests.get(
            test_url,
            proxies={"http": proxy_url, "https": proxy_url},
            timeout=3,
            headers=headers,
        )
        if response.status_code == 200:
            print(f"[+] Valid proxy: {proxy}")
            return {"http": proxy_url, "https": proxy_url}
    except:
        pass
    return None

def get_working_proxy():
    print("[*] Testing proxies in parallel...")
    with ThreadPoolExecutor(max_workers=30) as executor:
        futures = [executor.submit(check_proxy, proxy) for proxy in PROXY_LIST]
        for future in as_completed(futures):
            result = future.result()
            if result:
                print(f"[+] Found working proxy: {result}")
                return result
    print("[-] No working proxy found.")
    return None

@app.route('/')
def home():
    return 'Flask server is up and running!'

@app.route('/transcript', methods=['POST'])
def transcript():
    data = request.json
    youtube_url = data.get('url')
    if not youtube_url:
        return jsonify({'error': 'URL not provided'}), 400

    try:
        video_id = parse_qs(urlparse(youtube_url).query).get("v", [None])[0]
        if not video_id:
            return jsonify({"error": "Invalid YouTube URL"}), 400

        proxy = get_working_proxy()

        if proxy:
            transcript_list = YouTubeTranscriptApi.get_transcript(video_id, proxies=proxy)
        else:
            print("Using fallback without proxy...")
            transcript_list = YouTubeTranscriptApi.get_transcript(video_id)

        full_transcript = " ".join([x['text'] for x in transcript_list])
        return jsonify({'transcript': full_transcript})

    except Exception as e:
        print("‚ùå Error occurred:")
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
